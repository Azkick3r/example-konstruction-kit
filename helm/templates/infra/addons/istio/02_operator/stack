#!/bin/bash
COMMAND=$1
PROFILE=$2

[ ! -f "/usr/local/bin/istioctl" ] && echo "istioctl not found in /usr/local/bin, cannot continue" && exit

_Values_host_name=`kubectl get configmaps cluster-config -o jsonpath='{.data.hostname}' -n default` && [ -z "$_Values_host_name" ] && echo "Hostname is empty" && exit

function init() {
    istioctl operator init --tag=1.17.0
    kubectl apply -f ./templates/operator${_Values_server_arch}.yaml
    for namespace in $(kubectl get ns | grep -vE 'default|kube|monitoring|ingress|istio|oidc|message-broker' | awk '{print $1}' | tail -n +2); do
        kubectl label namespace $namespace istio-injection=enabled --overwrite; done
}

function ambient() {
    istioctl operator init --tag=1.17.0 --set profile=ambient
#    istioctl-ambient install --set profile=ambient -y
    kubectl apply -f ./templates/operator${_Values_server_arch}.yaml
    for namespace in $(kubectl get ns | grep -vE 'default|kube|monitoring|ingress|istio|oidc|message-broker' | awk '{print $1}' | tail -n +2); do
        kubectl label namespace $namespace istio.io/dataplane-mode=ambient --overwrite; done
}

function prune() {
    istioctl x uninstall -y --purge
    kubectl delete namespace istio-operator && kubectl delete namespace istio-system
}

if   [ "${COMMAND}" = "init" ] ; then init;
elif   [ "${COMMAND}" = "ambient" ] ; then ambient;
elif [ "${COMMAND}" = "prune" ]; then prune;

else echo Doing nothing !; fi