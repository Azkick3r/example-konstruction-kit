#!/bin/bash
COMMAND=$1
PROFILE=$2



kubectl version --output=json | grep "linux/arm64" > /dev/null && _Values_server_arch="-arm64v8"
_Values_host_name=`kubectl get configmaps cluster-config -o jsonpath='{.data.hostname}' -n default` && [ -z "$_Values_host_name" ] && echo "Hostname is empty" && exit

function up() {
    helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/ > /dev/null

    helm upgrade --install --create-namespace kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --namespace monitoring --version 5.11.0 \
    --set ingress.enabled=false \
    --set metricsScraper.enabled=true,metrics-server.enabled=true \
    --set metrics-server.args[0]='--kubelet-insecure-tls',extraArgs[0]='--enable-skip-login'

    helm install dashboard-route ./dashboard-route --set hostname=`kubectl get configmaps cluster-config -o jsonpath='{.data.hostname}' -n default` \
    --namespace monitoring

    kubectl apply -f ./dashboard-admin.yaml
}

function down() {
    helm uninstall kubernetes-dashboard --namespace=monitoring
    helm uninstall dashboard-route --namespace=monitoring
    kubectl delete -f ./dashboard-admin.yaml
}

function proxy() {
  open http://localhost:8001/api/v1/namespaces/monitoring/services/https:kubernetes-dashboard:https/proxy/ && kubectl proxy
}


if   [ "${COMMAND}" = "init" ] ; then up;
elif [ "${COMMAND}" = "restart" ] ; then down && up;
elif [ "${COMMAND}" = "prune" ]; then down;
elif [ "${COMMAND}" = "proxy" ]; then proxy;

else echo Doing nothing !; fi

#Sample query: {namespace="example-tenant-5a2f",container="callee-service-application"}
