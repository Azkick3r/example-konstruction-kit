#!/bin/bash

#REGISTRIES=("registry-1.docker.io")
CREDENTIALS='admin:$apr1$opP9IMT.$3sY/kXyTRUvYcYrvkrcM5.' #htpasswd -n admin

KUBED_VERSION=v0.13.2
INGRESS_VERSION=4.2.3
DASHBOARD_VERSION=5.11.0

function install_secret_syncer() {
    echo __installing secret syncer ...
    helm repo add appscode https://charts.appscode.com/stable/ > /dev/null && helm repo update > /dev/null
    helm upgrade --install kubed appscode/kubed --version $KUBED_VERSION --namespace kube-system --create-namespace > /dev/null
}

function install_authentication() {
    echo __installing basic authentication
    kubectl delete secret --ignore-not-found authentication-secret --namespace default
    kubectl create secret generic authentication-secret --from-literal=auth=${CREDENTIALS} --namespace default
    kubectl annotate secret authentication-secret kubed.appscode.com/sync="" --namespace default
}

function install_certificate() {
    helm repo add jetstack https://charts.jetstack.io > /dev/null
    helm upgrade --install cert-manager jetstack/cert-manager --version v1.11.0 \
      --namespace cert-manager --create-namespace --set installCRDs=true --set prometheus.enabled=false #--set enable-certificate-owner-ref=true
    echo -n YXBpVmVyc2lvbjogY2VydC1tYW5hZ2VyLmlvL3YxCmtpbmQ6IENsdXN0ZXJJc3N1ZXIKbWV0YWRhdGE6CiAgbmFtZTogc2VsZnNpZ25lZC1pc3N1ZXIKc3BlYzoKICBzZWxmU2lnbmVkOiB7fQotLS0KYXBpVmVyc2lvbjogY2VydC1tYW5hZ2VyLmlvL3YxCmtpbmQ6IENlcnRpZmljYXRlCm1ldGFkYXRhOgogIG5hbWU6IG15LXNlbGZzaWduZWQtY2EKICBuYW1lc3BhY2U6IGNlcnQtbWFuYWdlcgpzcGVjOgogIGlzQ0E6IHRydWUKCiAgY29tbW9uTmFtZTogRXhhbXBsZSBDYQogIHN1YmplY3Q6CiAgICBvcmdhbml6YXRpb25zOgogICAgICAtIEV4YW1wbGUgT3JnYW5pemF0aW9uCgogIHNlY3JldE5hbWU6IHJvb3QtY2VydGlmaWNhdGUKICBwcml2YXRlS2V5OgogICAgYWxnb3JpdGhtOiBFQ0RTQQogICAgc2l6ZTogMjU2CiAgaXNzdWVyUmVmOgogICAgbmFtZTogc2VsZnNpZ25lZC1pc3N1ZXIKICAgIGtpbmQ6IENsdXN0ZXJJc3N1ZXIKICAgIGdyb3VwOiBjZXJ0LW1hbmFnZXIuaW8KLS0tCmFwaVZlcnNpb246IGNlcnQtbWFuYWdlci5pby92MQpraW5kOiBJc3N1ZXIKbWV0YWRhdGE6CiAgbmFtZTogbXktY2EtaXNzdWVyCiAgbmFtZXNwYWNlOiBjZXJ0LW1hbmFnZXIKc3BlYzoKICBjYToKICAgIHNlY3JldE5hbWU6IHJvb3QtY2VydGlmaWNhdGU= \
    | base64 -d | kubectl apply -f -
}

function install_registry() {
    [ -z "$REGISTRIES" ] && return
    echo We now need the credentials to login to the docker registry
    read -p "email: " EMAIL < /dev/tty
    read -s -p "password: " PASSWORD < /dev/tty

    for registry in ${REGISTRIES[@]}; do
        kubectl --namespace default delete secret --ignore-not-found docker-registry "$registry"-secret
        kubectl --namespace default create secret docker-registry "$registry"-secret \
                --docker-server=$registry --docker-username=$EMAIL --docker-password=$PASSWORD --docker-email=$EMAIL
        kubectl annotate secret "$registry"-secret kubed.appscode.com/sync="" --namespace default
    done
}

function install_ingress() {
    echo __installing ingress controller ... this may take a moment ...
    if ! kubectl get nodes | grep -q docker-desktop; then echo "no docker desktop detected, please install ingress controller yourself (e.g. microk8s enable ingress)"; return; fi
    helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx > /dev/null && helm repo update > /dev/null
    helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx --wait --namespace ingress-nginx --create-namespace --version $INGRESS_VERSION > /dev/null
}

function install_dashboard()  {
    echo __installing kubernetes dashboard
    echo ___in case that this is not working due to corporate proxy, cancel the script and do a manuall pull upfront "docker pull kubernetesui/dashboard:v2.7.0"
    _Values_host_name=`kubectl get configmaps cluster-config -o jsonpath='{.data.hostname}' -n default` && [ -z "$_Values_host_name" ] && echo "Hostname is empty" && exit
    helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/ > /dev/null && helm repo update > /dev/null

    helm upgrade --install --create-namespace kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --namespace monitoring --version $DASHBOARD_VERSION \
    --set ingress.enabled=true,ingress.className=nginx \
    --set ingress.annotations.'nginx\.ingress\.kubernetes\.io/auth-secret'=authentication-secret,ingress.annotations.'nginx\.ingress\.kubernetes\.io/auth-type'=basic,ingress.annotations.'nginx\.ingress\.kubernetes\.io/rewrite-target'='/$1' \
    --set ingress.annotations.'cert-manager\.io/cluster-issuer'='selfsigned-issuer' \
    --set ingress.hosts[0]=$_Values_host_name,ingress.paths[0]='/dashboard/?(.*)'\
    --set ingress.tls[0].hosts[0]=$_Values_host_name,ingress.tls[0].secretName=root-certificate \
    --set metricsScraper.enabled=true,metrics-server.enabled=true \
    --set metrics-server.args[0]='--kubelet-insecure-tls',extraArgs[0]='--enable-skip-login'

    #clusterrolebinding
    echo -n I2NyZWF0ZXMgYSByb2xlIGJpbmRpbmcgdGhhdCB0aWVzIHRoZSBTZXJ2aWNlQWNjb3VudCBjcmVhdGVkIGJ5IHRoZSBoZWxtIHNoYXJ0IHdpdGggdGhlIGV4aXN0aW5nIENsdXN0ZXJSb2xlIGZyb20geW91ciBLdWJlcm5ldGVzCiNodHRwczovL2dpdGh1Yi5jb20va3ViZXJuZXRlcy9kYXNoYm9hcmQvYmxvYi9tYXN0ZXIvZG9jcy91c2VyL2FjY2Vzcy1jb250cm9sL1JFQURNRS5tZAoKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2x1c3Rlci1hZG1pbgpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogICAgbmFtZXNwYWNlOiBtb25pdG9yaW5n \
    | base64 -d | kubectl apply -f -
}

function uninstall_secret_syncer() { helm uninstall kubed --namespace kube-system ; }
function uninstall_authentication() { kubectl delete secret --ignore-not-found authentication-secret --namespace default ; }
function uninstall_certificate() {
    helm uninstall cert-manager --namespace cert-manager && kubectl delete namespace cert-manager
    for namespace in $(kubectl get ns | awk '{print $1}' | tail -n +2); do
        kubectl delete --ignore-not-found secret root-certificate -n $namespace; done
}
function uninstall_registry() { for registry in ${REGISTRIES[@]}; do kubectl --namespace default delete secret --ignore-not-found docker-registry "$registry"-secret; done ; }
function uninstall_ingress() { helm uninstall ingress-nginx --namespace ingress-nginx ; }
function uninstall_dashboard() { helm uninstall kubernetes-dashboard --namespace=monitoring && kubectl delete clusterrolebinding kubernetes-dashboard ; }

function preconditions_check {
    [ ! -f "/usr/local/bin/kubectl" ] && echo "kubectl not found in /usr/local/bin" && read -p "Press any key if you are stubborn enough to continue"
    [ ! -f "/usr/local/bin/helm" ] && echo "helm not found in /usr/local/bin .. ok will do that for you" && curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod +x ./get_helm.sh && ./get_helm.sh && rm ./get_helm.sh
}

function postcondition_check() {
    echo __checking post conditions ...
    _Values_host_name=`kubectl get configmaps cluster-config -o jsonpath='{.data.hostname}' -n default` && [ -z "$_Values_host_name" ] && echo "Hostname is empty" && exit
    if ! kubectl get secrets -n kube-system | grep -secret; then echo secret sync failed! cluster may not work correctly; fi
    if ! ping -c 1 "${_Values_host_name}" &> /dev/null; then echo "host ${_Values_host_name} is not reachable, do have have entry inside /etc/hosts ?"; fi
    if ! curl -s https://"${_Values_host_name}" > /dev/null ; then echo https connection cannot be established, please have the root cert imported: certificate/root/config/root.pem ; fi
}

function install() {
    preconditions_check

    install_secret_syncer
    install_authentication
    install_certificate
    install_registry

    install_ingress
    install_dashboard

    postcondition_check
    echo __finished ...
}

function uninstall() {
    uninstall_secret_syncer
    uninstall_authentication
    uninstall_certificate
    uninstall_registry

    uninstall_ingress
    uninstall_dashboard

    echo removing namespaces .. this sometimes takes a moment
    kubectl delete ns monitoring #&& kubectl delete ns ingress-nginx
}

function dashboard() {
    open http://localhost:8001/api/v1/namespaces/monitoring/services/https:kubernetes-dashboard:https/proxy/ && kubectl proxy
}

function linkerd() {
    if kubectl get ns | grep linkerd; then ~/.linkerd2/bin/linkerd uninstall | kubectl delete -f - ; exit; fi
    curl -sSfL https://run.linkerd.io/install | sh
    ~/.linkerd2/bin/linkerd install --crds | kubectl apply -f - && ~/.linkerd2/bin/linkerd install --set proxyInit.runAsRoot=true | kubectl apply -f -
}

if   [ "$1" = "init" ] ; then install;
elif [ "$1" = "prune" ] ; then uninstall;
elif [ "$1" = "dashboard" ] ; then dashboard;
elif [ "$1" = "linkerd" ] ; then linkerd;
else echo "Doing nothing .. Valid commands are (init | prune | dashboard | welcome | linkerd)"
fi