#!/bin/bash

#REGISTRIES=("registry-1.docker.io")
CREDENTIALS='admin:$apr1$opP9IMT.$3sY/kXyTRUvYcYrvkrcM5.' #htpasswd -n admin

KUBED_VERSION=v0.12.0
INGRESS_VERSION=4.2.3
DASHBOARD_VERSION=5.11.0

[ ! -f "/usr/local/bin/kubectl" ] && echo "kubectl not found in /usr/local/bin" && read -p "Press any key if you are stubborn enough to continue"
[ ! -f "/usr/local/bin/helm" ] && echo "helm not found in /usr/local/bin" && read -p "Press any key if you are stubborn enough to continue"

function install_secret_syncer() {
    echo __installing secret syncer ...
    helm repo add appscode https://charts.appscode.com/stable/ > /dev/null && helm repo update > /dev/null
    helm upgrade --install kubed appscode/kubed --version $KUBED_VERSION --namespace kube-system --create-namespace > /dev/null
}

function install_authentication() {
    echo __installing basic authentication
    kubectl delete secret --ignore-not-found authentication-secret --namespace default
    kubectl create secret generic authentication-secret --from-literal=auth=${CREDENTIALS} --namespace default
    kubectl annotate secret authentication-secret kubed.appscode.com/sync="" --namespace default
}

function install_certificate() {
    echo __installing server certificate
    (cd ./03_certificate; ./stack init; cd ..)
}

function install_registry() {
    [ -z "$REGISTRIES" ] && return
    echo We now need the credentials to login to the docker registry
    read -p "email: " EMAIL < /dev/tty
    read -s -p "password: " PASSWORD < /dev/tty

    for registry in ${REGISTRIES[@]}; do
        kubectl --namespace default delete secret --ignore-not-found docker-registry "$registry"-secret
        kubectl --namespace default create secret docker-registry "$registry"-secret \
                --docker-server=$registry --docker-username=$EMAIL --docker-password=$PASSWORD --docker-email=$EMAIL
        kubectl annotate secret "$1"-secret kubed.appscode.com/sync="" --namespace default
    done
}

function install_ingress() {
    echo __installing ingress controller ... this may take a moment ...
    if ! kubectl get nodes | grep -q docker-desktop; then echo no docker desktop detected, please install ingress controller yourself; return; fi
    helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx > /dev/null && helm repo update > /dev/null
    helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx --wait --namespace ingress-nginx --create-namespace --version $INGRESS_VERSION > /dev/null
}

function install_dashboard()  {
    echo __installing kubernetes dashboard
    _Values_host_name=`kubectl get configmaps cluster-config -o jsonpath='{.data.hostname}' -n default` && [ -z "$_Values_host_name" ] && echo "Hostname is empty" && exit
    helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/ > /dev/null && helm repo update > /dev/null

cat <<EOF | helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --namespace monitoring --create-namespace --version $DASHBOARD_VERSION --set ingress.hosts[0]=$_Values_host_name,ingress.tls[0].hosts[0]=$_Values_host_name  --values -
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/auth-secret: authentication-secret
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/rewrite-target: /\$1
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
  paths:
    - /dashboard/?(.*)
  tls:
    - secretName: "server-certificate-secret"
extraArgs:
  - --enable-skip-login
metrics-server:
  enabled: true
  args:
    - --kubelet-insecure-tls
metricsScraper:
  enabled: true
EOF

cat <<EOF | kubectl apply -f -
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
  namespace: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: monitoring
EOF

}

function uninstall_secret_syncer() {
    helm uninstall kubed --namespace kube-system
}

function uninstall_authentication() {
    kubectl delete secret --ignore-not-found authentication-secret --namespace default
}

function uninstall_certificate() {
    (cd ./03_certificate; ./stack prune; cd ..)
}

function uninstall_registry() {
    for registry in ${REGISTRIES[@]}; do
        kubectl --namespace default delete secret --ignore-not-found docker-registry "$registry"-secret
    done
}

function uninstall_ingress() {
    helm uninstall ingress-nginx --namespace ingress-nginx
}

function uninstall_dashboard() {
    helm uninstall kubernetes-dashboard --namespace=monitoring
    kubectl delete clusterrolebinding kubernetes-dashboard
}

function install() {
    install_secret_syncer

    install_authentication
    install_certificate
    install_registry

    install_ingress
    install_dashboard

    if ! kubectl get secrets -n kube-system | grep -secret; then echo secret sync failed! cluster may not work correctly; fi
    echo finished ...
}

function uninstall() {
    uninstall_secret_syncer
    uninstall_authentication
    uninstall_certificate
    uninstall_registry

    uninstall_ingress
    uninstall_dashboard

    echo removing namesaces .. this sometimes takes a moment
    kubectl delete ns monitoring #&& kubectl delete ns ingress-nginx
}

function dashboard() {
    open http://localhost:8001/api/v1/namespaces/monitoring/services/https:kubernetes-dashboard:https/proxy/ && kubectl proxy
}

function welcome() {
    echo -n \
    PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8YmFzZSBocmVmPSJodHRwczovL2t1YmVybmV0ZXMvIiAvPgo8aGVhZCBsYW5nPSJlbiI+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+Q2x1c3RlciBMYW5kaW5nIFBhZ2U8L3RpdGxlPgogICAgPGxpbmsgcmVsPSJwcmVjb25uZWN0IiBocmVmPSJodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tIj4KICAgIDxsaW5rIGhyZWY9Imh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Um9ib3RvOml0YWwsd2dodEAwLDEwMDswLDMwMDswLDQwMDswLDcwMDsxLDEwMCZkaXNwbGF5PXN3YXAiCiAgICAgICAgICByZWw9InN0eWxlc2hlZXQiPgogICAgPHN0eWxlPgogICAgICAgIGJvZHksIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYgewogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgfQoKICAgICAgICB1bCB7CiAgICAgICAgICAgIG1hcmdpbjogMTZweCAwOwogICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDQwcHg7CiAgICAgICAgfQoKICAgICAgICBsaSB7CiAgICAgICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7CiAgICAgICAgfQoKICAgICAgICBodG1sIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwOTlmZjsKICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjsKICAgICAgICB9CgogICAgICAgIGJvZHkgewogICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjsKICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nLCBzYW5zLXNlcmlmOwogICAgICAgICAgICBwYWRkaW5nLXRvcDogMTAwcHg7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CgogICAgICAgIC50aXRsZSB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogNjBweDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDMwMDsKICAgICAgICB9CgogICAgICAgIC5zdWJ0aXRsZSB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMjBweDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDEwMDsKICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljOwogICAgICAgIH0KCiAgICAgICAgLmJveCB7CiAgICAgICAgICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDY2LCA2NiwgNjYsIDAuMjUpOwogICAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCAjZmZmZmZmOwogICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgICBtYXJnaW46IDc1cHggYXV0byAwOwogICAgICAgICAgICBtYXgtd2lkdGg6IDEwMjRweDsKICAgICAgICAgICAgcGFkZGluZzogMjVweDsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgfQoKICAgICAgICAubGlua3MtY29udGFpbmVyIHsKICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC13cmFwOiB3cmFwOwogICAgICAgICAgICBtYXJnaW4tdG9wOiAyNXB4OwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICB9CgogICAgICAgIC5saW5rcyB7CiAgICAgICAgICAgIGZsZXg6IDMzJTsKICAgICAgICAgICAgbWFyZ2luOiAyNXB4IDA7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgICAgfQoKICAgICAgICAubGlua3MgaDYgewogICAgICAgICAgICBmb250LXNpemU6IDMwcHg7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7CiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogNzlweDsKICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKICAgICAgICB9CgogICAgICAgIC5saW5rcyBhIHsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICAgICAgY29sb3I6ICNmZmZmZmY7CiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4OwogICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgIG1hcmdpbjogNXB4OwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgfQoKICAgICAgICAubGlua3MgYTpob3ZlciB7CiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOwogICAgICAgIH0KCiAgICAgICAgLmxpbmtzIGEgaW1nIHsKICAgICAgICAgICAgaGVpZ2h0OiAyNHB4OwogICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7CiAgICAgICAgICAgIHdpZHRoOiAyNHB4OwogICAgICAgIH0KICAgICAgICBwIHsKICAgICAgICAgIGhlaWdodDogMXB4OwogICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjZmZmZmZmNTQ7CiAgICAgICAgfQogICAgPC9zdHlsZT4KPC9oZWFkPgo8Ym9keT4KPGRpdiBjbGFzcz0iYm94Ij4KICAgIDxoMSBjbGFzcz0idGl0bGUiPldlbGNvbWUgdG8gdGhlIEV4YW1wbGUgQ2x1c3RlciAxLjAuNjwvaDE+CiAgICA8aDIgY2xhc3M9InN1YnRpdGxlIj5Zb3VyIGJlc3QgY291cnNlIHdvdWxkIGJlIHRvIHRyZWFkIGxpZ2h0bHkgLi4uPC9oMj4KCiAgICA8ZGl2IGNsYXNzPSJsaW5rcy1jb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImxpbmtzIj4KICAgICAgICAgICAgPGg2PkRhc2hib2FyZHM8L2g2PgogICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICA8cD48L3A+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2Rhc2hib2FyZC8jIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPuKYuO+4jyBLdWJlcm5ldGVzIERhc2hib2FyZDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9raWFsaS8iIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+4pu1IElzdGlvIERhc2hib2FyZDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPHA+PC9wPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9qYWVnZXIvIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPvCfj7kgSmFlZ2VyPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2dyYWZhbmEvIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPvCfk4ogTG9raTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPHA+PC9wPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9vaWRjL2F1dGgvIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPvCflJAgS2V5Y2xvYWs8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii93ZWxjb21lL3Byb3h5X2xvZ291dC5odG1sP3RlbmFudD0wIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPuKeoe+4jyBMb2dvdXQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZXZlbnQvIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPvCfkLAgRXZlbnQgRGlzcGF0Y2hlcjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3JhYmJpdG1xLyIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj7wn5CwIFJhYmJpdE1RPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJsaW5rcyI+CiAgICAgICAgICAgIDxoNj5FeGFtcGxlIDA8L2g2PgogICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICA8cD48L3A+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZoaXIvIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPvCflKUgRkhJUiBGYWNhZGU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZmhpci9hY3R1YXRvci9oZWFsdGgiIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+8J+Wpe+4jyBIZWFsdGg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxwPjwvcD4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGVyc29uLzAvIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPvCfjI0gUGVyc29uIFNlcnZpY2U8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcGVyc29uLzAvYWN0dWF0b3IvaGVhbHRoIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPvCflqXvuI8gSGVhbHRoPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8cD48L3A+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NhbGxlZS8wLyIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj7wn5OiIENhbGxlZSBTZXJ2aWNlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NhbGxlZS8wL2FjdHVhdG9yL2hlYWx0aCIgdGFyZ2V0PSJfYmxhbmsiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj7wn5al77iPIEhlYWx0aDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPC9ib2R5Pgo8L2h0bWw+Cg== \
    | base64 -d > index.html
    open ./index.html
}


if   [ "$1" = "init" ] ; then install;
elif [ "$1" = "prune" ] ; then uninstall;
elif [ "$1" = "dashboard" ] ; then dashboard;
elif [ "$1" = "welcome" ] ; then welcome;

else echo Doing nothing !; fi