#!/bin/bash
source .values
COMMAND=$1
PROFILE=$2

[ ! -f "/usr/local/bin/helm" ] && echo "helm not found in /usr/local/bin, cannot continue" && exit

kubectl version | grep "Server Version" | grep "linux/arm64" > /dev/null && _Values_server_arch="-arm64v8"
_Values_host_name=`kubectl get configmaps cluster-config -o jsonpath='{.data.hostname}' -n default` && [ -z "$_Values_host_name" ] && echo "Hostname is empty" && exit


function up() {
    kubectl create namespace ${_Release_namespace}
    helm repo add grafana https://grafana.github.io/helm-charts
    helm repo update
    
    helm upgrade --install loki grafana/loki-stack --namespace=${_Release_namespace} --set grafana.enabled=false,prometheus.enabled=true,prometheus.alertmanager.persistentVolume.enabled=false,prometheus.server.persistentVolume.enabled=false
    kubectl delete deployment loki-prometheus-server --namespace=${_Release_namespace}
    kubectl delete deployment loki-kube-state-metrics --namespace=${_Release_namespace}

    kubectl apply -f templates/configmap.yml --namespace=${_Release_namespace}

    echo .
    echo Add http://loki.${_Release_namespace}:3100 as a Loki datasource in Grafana

    #http://prometheus.istio-system:9090
    #Sample query: {namespace="example-tenant-0",container="person-service-application"}
}

function down() {
    helm uninstall loki --namespace=${_Release_namespace}
}


if   [ "${COMMAND}" = "init" ] ; then up;
elif [ "${COMMAND}" = "restart" ] ; then down && up;
elif [ "${COMMAND}" = "prune" ]; then down;

else echo Doing nothing !; fi