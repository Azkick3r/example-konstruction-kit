#!/bin/bash
_Values_host_name=$1

[ -z "$_Values_host_name" ] && echo "Server Name is empty" && exit

unamestr=`uname`
if [[ "$unamestr" == 'Darwin' ]]; then
  sed -i '' 's/SERVER_NAME/'"${_Values_host_name}"'/g' ./config/san.cnf
else
  sed -i 's/SERVER_NAME/'"${_Values_host_name}"'/g' ./config/san.cnf
fi

#variables
export DAYS_VALID="365"
export ROOT_FILE="../root/config/root"
export SERVER_FILE="./config/server"

# create key, won't ask for password because no encryption applied
openssl genrsa\
        -out ${SERVER_FILE}.key\
        4096

echo signing ...

# create signing request (csr)
openssl req -new -sha512\
        -key ${SERVER_FILE}.key\
        -out ${SERVER_FILE}.csr\
        -config config/san.cnf\
        -extensions SAN

echo server cert
# create end entity certificate
openssl x509 -req -sha512 -days ${DAYS_VALID}\
        -in ${SERVER_FILE}.csr\
        -CA ${ROOT_FILE}.pem\
        -CAkey ${ROOT_FILE}.key\
        -CAcreateserial -out ${SERVER_FILE}.pem\
        -extfile config/san.cnf\
        -extensions SAN\
        -passin pass:kubernetes #this should be changed, because we have a hardcoded password here


# remove csr
rm ${SERVER_FILE}.csr
cp ./config/san.org ./config/san.cnf